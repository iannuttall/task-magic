---
description:
globs:
alwaysApply: false
---
# Status Update Generation Rule

Whenever you use this rule, start your message with the following:

"Generating project status update for a specific plan (including memory)..."

This rule guides an AI agent in creating a concise status update suitable for Slack/Teams by analyzing a specific project feature plan (identified by the `#plan` hashtag in `{project-name}-notes/`), current task statuses, and archived tasks, following the Task Magic system.

You are a helpful assistant that writes short status updates. Do not ask any questions.

## 1. Information Sources

To generate the status update, the agent will use:

1. **Specific Feature Plan (User-provided filename, e.g., `your-feature-plan.md`):** For high-level feature goals and potential highlights. The user MUST specify which plan to use (e.g., `your-feature-plan.md`) when invoking the rule. The agent will find this file by searching for files with `#plan` hashtag.
2. **Master Task Checklist (`TASKS.md` with `#task #index` hashtags):** For the current status of active tasks (pending, inprogress, completed, failed).
3. **Task Archive Log (`TASKS_LOG.md` with `#task #log #memory` hashtags):** For information on tasks that have been completed and archived.
4. **Individual Task Files:** Task files are identified by the `#task` hashtag. Active tasks have only `#task`, while archived tasks have both `#task` and `#memory` hashtags.

## 2. Output Format (Slack/Teams Markdown)

The status update should strictly follow this format. Omit any section (including the heading) if there is no relevant content for it.
The agent will generate a filename using a formatted UTC timestamp (e.g., `YYYY-mm-dd_HH-MM_status_update.md`) and save the content below into `{project-name}-notes/{timestamp}_status_update.md` with appropriate hashtags at the end of the file.

```markdown
---
plan: "[[document-name-without-path-or-extension]]"
date: YYYY-MM-DD
---

*Highlights*
- {Concise highlight 1, ~10 words}
- {Concise highlight 2, ~10 words}
- {Concise highlight 3, ~10 words}

*Completed*
- {Completed task 1 title, ~10 words}
- {Completed task 2 title, ~10 words}
- {Completed task 3 title, ~10 words}

*Next Steps*
- {Next step task 1 title, ~10 words}
- {Next step task 2 title, ~10 words}
- {Next step task 3 title, ~10 words}

*Risks / Blockers*
- {Risk/Blocker 1 from failed task, ~10 words}
- {Risk/Blocker 2 from failed task, ~10 words}
- {Risk/Blocker 3 from failed task, ~10 words}
```

## 3. Content Generation Guidelines

1. **Agent is provided with a feature plan filename by the user (e.g., `your-feature-plan.md`).**
	- The agent searches for this file using the file search tool, looking for files with `#plan` hashtag.
	- Identify 1-3 key objectives, recent progress described within, or upcoming critical milestones from *this specific plan* to serve as "Highlights." These should be very concise.
	- Extract just the document name without extension (e.g., from "your-feature-plan.md" extract "your-feature-plan") for use in the wikilink and section headings.

2. **Gathering Completed Tasks:**
	- The agent should try to determine a feature name or key identifiers from the specified plan file (e.g., from its title or filename like `user-authentication-plan.md` implies feature "user-authentication").
	- **From `TASKS.md` (found by searching for files with `#task #index` hashtags):** Identify tasks marked with `[x]` (completed). Filter these for relevance to the specified feature plan.
	- **From `TASKS_LOG.md` (found by searching for files with `#task #log #memory` hashtags):** Read and parse the log. Identify tasks archived with `Status: completed`. Filter these for relevance to the specified feature plan by checking the task title and description in the log against the plan's feature name/keywords.
	- Combine the lists of completed tasks from `TASKS.md` and `TASKS_LOG.md`. Select up to 3 of the most significant or recent ones for the "*Completed*" section. Use the task title.

3. **Agent reads `TASKS.md` (found by searching for files with `#task #index` hashtags) for other statuses:**
	- **Next Steps:** Identify tasks marked with `[ ]` (pending) or `[-]` (in progress). Filter and prioritize critical/high priority tasks related to the specified feature plan. List up to 3. Use the task title from `TASKS.md`.
	- **Risks / Blockers:** Identify tasks marked with `[!]` (failed). Filter for those related to the specified feature plan.
		- For each relevant failed task, the agent *may* need to briefly consult the corresponding task file (found by searching for the specific task filename with `#task` hashtag) to understand the `error_log` or description to summarize the risk/blocker.
		- List up to 3.

4. **Conciseness:**
	- Each bullet point should be approximately 10 words or less.
	- A maximum of 3 bullet points per section.
	- If a section has no relevant items, omit the entire section including its heading.

5. **File Output:** The agent should construct the status update string and then save it to the specified file with appropriate hashtags. It should then confirm the file has been saved. Do not ask clarifying questions or explain the process beyond confirming the save location.

6. **Language:** Use the primary language of the source documents.

## 4. Agent Workflow Example

1. User invokes this rule, specifying a plan filename, e.g., `@status-update.mdc generate a status update for my-feature-plan.md`.
2. Agent silently searches for and reads the specified plan file using the file search tool (looking for files with `#plan` hashtag).
3. Agent extracts just the document name without extension (e.g., "my-feature-plan" from "my-feature-plan.md").
4. Agent silently searches for and reads `TASKS.md` (by searching for files with `#task #index` hashtags).
5. Agent silently searches for and reads `TASKS_LOG.md` (by searching for files with `#task #log #memory` hashtags).
6. Agent *may* silently read specific task files by searching for them with `#task` hashtag if details are needed.
7. Agent generates a UTC timestamp by running the command `date -u +%Y-%m-%d_%H-%M`. The agent will parse the timestamp from the first line of the command's output.
8. Agent constructs the status update string according to the format and guidelines, including YAML frontmatter with an Obsidian wikilink to the plan (without extension).
9. Agent saves the status update string to `{project-name}-notes/{formatted_timestamp}_status_update.md` using the `edit_file` tool and adds appropriate hashtags at the end of the file: `#status-update #memory`.
10. Agent confirms to the user that the status update has been saved to the specified file path.

This rule helps ensure consistent and brief project updates focused on a specific feature plan, including historical completions, based on the Task Magic system's current state, and archives them for future reference.
